@page
@using Microsoft.AspNetCore.Mvc.Localization
@using Volo.Abp.Account.Localization
@using Volo.Abp.Account.Settings
@using Volo.Abp.Account.Web.Pages.Account;
@using Volo.Abp.AspNetCore.Mvc.UI.Theming;
@using Volo.Abp.Identity;
@using Volo.Abp.Settings
@model Kidoo.Learn.Web.Account.LoginModel
@inject IHtmlLocalizer<AccountResource> L
@inject IThemeManager ThemeManager
@inject Volo.Abp.Settings.ISettingProvider SettingProvider

@{
    Layout = ThemeManager.CurrentTheme.GetAccountLayout();
}

@section scripts
    {
    <abp-script-bundle name="@typeof(LoginModel).FullName">
        <abp-script src="/Pages/Account/Login.js" />
    </abp-script-bundle>
}

@section styles
{
    <style type="text/css">
        .login_box_main_wrapper .signin-wrapper .left-side form .field-icon span
        {
            position: absolute;
            left: 30px;
            top: 15px !important;
            font-size: 20px;
            color: #0060aa;
        }
    </style>
}

<div class="login_box_main_wrapper" id="login_height">
    <div class="container">
        <div class="login-logo gap-top">
            <a href="/"> <img src="/images/index1-logo.png" alt="logo"> </a>
        </div>
        <div class="signin-wrapper">
            <div class="row">
                <div class="col-lg-6 col-md-6 col-12">
                    <div class="left-side">
                        <h4>Sign In</h4>
                        @if (await SettingProvider.IsTrueAsync(AccountSettingNames.IsSelfRegistrationEnabled))
                        {
                            <strong>
                                @L["AreYouANewUser"]
                                <a href="@Url.Page("./Register", new {returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash})" class="text-decoration-none">@L["Register"]</a>
                            </strong>
                        }
                        @if (Model.EnableLocalLogin)
                        {
                            <form method="post">
                            <div class="form-group field-icon row">
                                <div class="col-md-12">
                                   <input asp-for="LoginInput.UserNameOrEmailAddress" placeholder="Username or Mobile Number" class="form-control" />
                                    <span><i class="fa fa-user" aria-hidden="true"></i></span>
                                </div>
                                <div>
                                    <span asp-validation-for="LoginInput.UserNameOrEmailAddress" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="form-group field-icon row">
                                <div class="col-md-12">
                                    <input type="password" class="form-control" autocomplete="new-password" maxlength="@IdentityUserConsts.MaxPasswordLength" asp-for="LoginInput.Password" placeholder="Password" />
                                    <span><i class="fa fa-unlock-alt" aria-hidden="true"></i></span>
                                </div>
                                <div>
                                    <span asp-validation-for="LoginInput.Password"></span>
                                </div>
                            </div>
                            <div class="round">
                                <input type="checkbox" id="checkbox">
                                <label for="checkbox"><span>Remember Me</span></label>
                            </div>

                            <div class="login-btn-sec">
                                <abp-button class="sub-btn" type="submit" button-type="Primary" name="Action" value="Login">@L["Login"]</abp-button>
                                @if (Model.ShowCancelButton)
                                {
                                    <abp-button class="sub-btn" type="submit" button-type="Secondary" formnovalidate="formnovalidate" name="Action" value="Cancel">@L["Cancel"]</abp-button>
                                }
                                    @if (await SettingProvider.IsTrueAsync(AccountSettingNames.IsSelfRegistrationEnabled))
                                    {
                                        <strong>
                                            @L["AreYouANewUser"]
                                            <a href="@Url.Page("./Register", new {returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash})" class="text-decoration-none">@L["Register"]</a>
                                        </strong>
                                    }
                            </div>
                            </form>
                        }
                    </div>
                </div>
                <div class="col-lg-6 col-md-6 col-12">
                    <div class="login-img">
                        <img src="/images/login-side.png" alt="img">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* <div class="card mt-3 shadow-sm rounded">
    <div class="card-body p-5">
        <h4>@L["Login"]</h4>
        @if (await SettingProvider.IsTrueAsync(AccountSettingNames.IsSelfRegistrationEnabled))
        {
            <strong>
                @L["AreYouANewUser"]
                <a href="@Url.Page("./Register", new {returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash})" class="text-decoration-none">@L["Register"]</a>
            </strong>
        }
        @if (Model.EnableLocalLogin)
        {
            <form method="post" class="mt-4">
                <div class="mb-3">
                    <label asp-for="LoginInput.UserNameOrEmailAddress" class="form-label"></label>
                    <input asp-for="LoginInput.UserNameOrEmailAddress" class="form-control" />
                    <span asp-validation-for="LoginInput.UserNameOrEmailAddress" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="LoginInput.Password" class="form-label"></label>
                    <div class="input-group">
                        <input type="password" class="form-control" autocomplete="new-password" maxlength="@IdentityUserConsts.MaxPasswordLength" asp-for="LoginInput.Password" />
                        <button class="btn btn-secondary" type="button" id="PasswordVisibilityButton"><i class="fa fa-eye-slash" aria-hidden="true"></i></button>
                    </div>
                    <span asp-validation-for="LoginInput.Password"></span>
                </div>
                <abp-row>
                    <abp-column>
                        <abp-input asp-for="LoginInput.RememberMe" class="mb-4" />
                    </abp-column>
                    <abp-column class="text-end">
                        <a href="@Url.Page("./ForgotPassword", new {returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash})">@L["ForgotPassword"]</a>
                    </abp-column>
                </abp-row>
                <div class="d-grid gap-2">
                    <abp-button type="submit" button-type="Primary" name="Action" value="Login" class="btn-lg mt-3">@L["Login"]</abp-button>
                    @if (Model.ShowCancelButton)
                    {
                        <abp-button type="submit" button-type="Secondary" formnovalidate="formnovalidate" name="Action" value="Cancel" class="btn-lg mt-3">@L["Cancel"]</abp-button>
                    }
                </div>
            </form>
        }

        @if (Model.VisibleExternalProviders.Any())
        {
            <div class="mt-2">
                <h5>@L["OrLoginWith"]</h5>
                <form asp-page="./Login" asp-page-handler="ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" asp-route-returnUrlHash="@Model.ReturnUrlHash" method="post">
                    @foreach (var provider in Model.VisibleExternalProviders)
                    {
                        <button type="submit" class="btn btn-primary m-1" name="provider" value="@provider.AuthenticationScheme" title="@L["LogInUsingYourProviderAccount", provider.DisplayName]">@provider.DisplayName</button>
                    }
                </form>
            </div>
        }

        @if (!Model.EnableLocalLogin && !Model.VisibleExternalProviders.Any())
        {
            <div class="alert alert-warning">
                <strong>@L["InvalidLoginRequest"]</strong>
                @L["ThereAreNoLoginSchemesConfiguredForThisClient"]
            </div>
        }

    </div>
</div> *@
